{"version":3,"sources":["components/ChatPage/Messages/Message/Message.module.css","components/common/Battons/DownButton/DownButton.module.css","components/ChatPage/Messages/Messages.module.css","components/ChatPage/AddMessageForm/AddMessageForm.module.css","components/ChatPage/ChatPage.module.css","redux/chat-selectors.ts","components/ChatPage/Messages/Message/Message.tsx","assets/icons/down_icon.svg","components/common/Battons/DownButton/DownButton.tsx","components/ChatPage/Messages/Messages.tsx","components/ChatPage/AddMessageForm/AddMessageForm.tsx","components/ChatPage/ChatPage.tsx"],"names":["module","exports","getMessages","state","chat","messages","getChannelStatus","status","Message","message","className","styles","src","photo","userAvatar","message__authorAvatar","alt","message__authorName","userName","message__text","React","memo","DownButton","onClick","downButton","downIcon","Messages","useSelector","anchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","scrollToBottom","current","scrollIntoView","behavior","messages__wrapper","messages__body","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","map","id","ref","downButton__container","AddMessageForm","channelStatus","dispatch","useDispatch","setMessage","symbolsCounter","setSymbolsCounter","onSendBtnClick","sendMessageThunk","isSendAllowed","keyupHandler","ctrlKey","key","document","addEventListener","removeEventListener","form__body","form__textarea","onChange","target","value","messageLenght","length","cn","form__button","form__button_disabled","disabled","title","form__counter","ChatPage","isAuth","getIsAuth","startMessagesListeningThunk","stopMessagesListeningThunk","alert","wrapper","body","messagesContainer","formContainer","replace","to"],"mappings":"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","file":"static/js/7.260b57ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1PnyW\",\"message__authorAvatar\":\"Message_message__authorAvatar__DMCkV\",\"message__authorName\":\"Message_message__authorName__30lxZ\",\"message__text\":\"Message_message__text__2H4-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryButton\":\"DownButton_primaryButton__1i08F\",\"downButton\":\"DownButton_downButton__3_Vn-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages__body\":\"Messages_messages__body__tmpIo\",\"downButton__container\":\"Messages_downButton__container__oDh8O\",\"downButton\":\"Messages_downButton__1IXKt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__body\":\"AddMessageForm_form__body__hOjSO\",\"form__textarea\":\"AddMessageForm_form__textarea__3U5qD\",\"form__button\":\"AddMessageForm_form__button__2I83D\",\"form__button_disabled\":\"AddMessageForm_form__button_disabled__1lmZf\",\"form__counter\":\"AddMessageForm_form__counter__1E1O9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ChatPage_wrapper__2Y4aX\",\"body\":\"ChatPage_body__1RrVH\",\"messagesContainer\":\"ChatPage_messagesContainer__3hMwK\",\"formContainer\":\"ChatPage_formContainer__2vhDI\"};","import {AppStateType} from './store-redux'\r\n\r\nexport const getMessages = (state: AppStateType) => state.chat.messages\r\nexport const getChannelStatus = (state: AppStateType) => state.chat.status","import React from 'react'\r\n\r\nimport styles from './Message.module.css'\r\nimport userAvatar from '../../../../assets/images/defaultUserImage.jpg'\r\nimport { ChatMessageType } from '../../../../redux/chat-reducer'\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({ message }) => {\r\n\r\n  return (\r\n    <div className={styles.message}>\r\n\r\n      <img\r\n        src={message.photo ? message.photo : userAvatar}\r\n        className={styles.message__authorAvatar}\r\n        alt='userPhoto'\r\n      />\r\n      <span className={styles.message__authorName}>\r\n        {message.userName}\r\n      </span>\r\n\r\n      <p className={styles.message__text}>\r\n        {message.message}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(Message)","export default __webpack_public_path__ + \"static/media/down_icon.eab62b20.svg\";","import React from 'react'\r\n\r\nimport styles from './DownButton.module.css'\r\nimport downIcon from '../../../../assets/icons/down_icon.svg'\r\n\r\ntype PropsType = {\r\n  onClick: () => void\r\n}\r\n\r\nconst DownButton: React.FC<PropsType> = ({ onClick }) => {\r\n  return (\r\n    <button className={styles.downButton} onClick={onClick}>\r\n      <img src={downIcon} alt=\"\" />\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default React.memo(DownButton)","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getMessages } from '../../../redux/chat-selectors'\r\nimport Message from './Message/Message'\r\nimport DownButton from '../../common/Battons/DownButton/DownButton'\r\n\r\nimport styles from './Messages.module.css'\r\n\r\n// Messages component\r\n// TODO: Replace index as a key\r\n\r\nconst Messages: React.FC = () => {\r\n    // Получаем массив сообщений из стейта через селектор\r\n    const messages = useSelector(getMessages)\r\n    // Инициализируем Ref для выполненния скроллинга в нижнюю часть окна messages (к тэгу div внизу окна)\r\n    const anchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    /* Для реализации умного скроллинга - чтобы автоматически при поступлении новых сообщений скролл не перемещался \r\n    вниз окна, если мы читаем сообщения где-то в центре - для начала введем состояние isAutoScroll,\r\n    которое в зависимости от условия (положения текущего скрола) будет включать (true) или выключать автоскроллинг\r\n    к последнему сообщению в чате. Т.е. если положение скролла не около последнего сообщения, то автоскроллинг вниз\r\n    срабатывать не будет.\r\n    Также в дальнейшем можно будет добавить кнопку для скролла к последнему сообщению,\r\n    привязав к состоянию isAutoScroll - если false, то отбразить кнопку перемотки вниз. */\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(true)\r\n\r\n    // Обработчик события onScroll. Включает-выключает автоскролл к последнему сообщению в зависимости от позиции скролла.\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n\r\n        /* Условие включения автоскролла(все в px): общая высота контента - величина проскролленного контента сверху -\r\n        - высота элемента, в котором определен скролл (у нас div высотой 360 px) должны быть <= 320 px */\r\n        if (element.scrollHeight - element.scrollTop - element.clientHeight <= 320) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    /* При получении новых messages скролл должен опуститься ниже - поэтому используем useEffect\r\n    с зависимостью от messages.\r\n     */\r\n    useEffect(() => {\r\n        /* Перемотку (scrolling) делаем при помощи метода скролла к элементу (доступ к элементу - через ref).\r\n        При этом проверяем, разрешен ли автоскролл. А до этого определяем условие включения-выключения автоскролла\r\n        в зависимости от текущего положения скролла - на какую позицию его поставил пользователь.\r\n        Для этого на родительскую ноду вешаем событие onScroll.\r\n         */\r\n        if (isAutoScroll) {\r\n            scrollToBottom()\r\n        }\r\n    }, [messages])\r\n\r\n    // Вспомогательная ф-ция скролла к элементу\r\n    const scrollToBottom = () => {\r\n        anchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n\r\n    return (\r\n        <div className={styles.messages__wrapper}>\r\n            <div className={styles.messages__body} onScroll={scrollHandler}>\r\n                {messages.map((message) => {\r\n                    return <Message key={message.id} message={message} />\r\n                })}\r\n                {/* Используем пустой div под Ref для выполнения операций с ним по скроллингу */}\r\n                <div ref={anchorRef}></div>\r\n            </div>\r\n            {!isAutoScroll &&\r\n                <div className={styles.downButton__container}>\r\n                    <div className={styles.downButton}>\r\n                        <DownButton onClick={scrollToBottom} />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Messages)","import React, { useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport cn from 'classnames'\r\n\r\nimport { sendMessageThunk } from \"../../../redux/chat-reducer\"\r\n\r\nimport styles from './AddMessageForm.module.css'\r\nimport { StatusType } from \"../../../api/chatAPI\"\r\n\r\ntype PropsType = {\r\n    channelStatus: StatusType\r\n}\r\n\r\nconst AddMessageForm: React.FC<PropsType> = ({ channelStatus }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [message, setMessage] = useState('')\r\n    const [symbolsCounter, setSymbolsCounter] = useState<number>(0)\r\n\r\n    // Лимит символов в сообщении (ограничение сервера)\r\n    const symbolsLimit: number = 100\r\n\r\n    const onSendBtnClick = () => {\r\n        if (!message) {\r\n            setMessage('')\r\n            setSymbolsCounter(0)\r\n            return\r\n        }\r\n        dispatch(sendMessageThunk(message))\r\n        setMessage('')\r\n        setSymbolsCounter(0)\r\n    }\r\n\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        const message = e.target.value\r\n        const messageLenght = message ? message.length : 0\r\n        if (messageLenght <= symbolsLimit) {\r\n            setMessage(message)\r\n            setSymbolsCounter(messageLenght)\r\n        }\r\n    }\r\n\r\n    /* Ф-ция для блокировки (disable) кнопки отправки сообщений. Будет использоваться также при отправке сообщения по сочитанию клавиш.\r\n    True - если в сообщении есть символы и статус ws-канала ready.\r\n    */\r\n    const isSendAllowed = () => (symbolsCounter !== 0) && (channelStatus === 'ready')\r\n\r\n    /* Для отправки сообщения по комбинации клавиш Ctrl+Enter используем useEffect, где добавим прослушивание события keyup.\r\n    На это событие вешаем обработчик keyupHandler, в кот. отслеживанием отжатие комбинации клавиш Ctrl+Enter, и если отправка \r\n    сообщений доступна - отправляем сообщение.\r\n    */\r\n\r\n    const keyupHandler = (e: KeyboardEvent) => {\r\n        if (isSendAllowed()) {\r\n            if (e.ctrlKey && e.key === 'Enter') {\r\n                onSendBtnClick()\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keyup', keyupHandler)\r\n        // Cleanup function\r\n        return () => {\r\n            document.removeEventListener('keyup', keyupHandler)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={styles.form__body}>\r\n            <textarea\r\n                className={styles.form__textarea}\r\n                onChange={onChangeHandler}\r\n                value={message}\r\n            />\r\n            <button\r\n                className={cn(styles.form__button, {\r\n                    [styles.form__button_disabled]: symbolsCounter === 0\r\n                })}\r\n                onClick={onSendBtnClick}\r\n                disabled={!isSendAllowed()}\r\n                title='Ctrl+Enter'\r\n            >\r\n                Send\r\n            </button>\r\n            <div className={styles.form__counter}>\r\n                {`${symbolsCounter}/${symbolsLimit}`}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(AddMessageForm)","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nimport Messages from './Messages/Messages'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\n\r\nimport { getIsAuth } from '../../redux/auth-selectors'\r\nimport { getChannelStatus } from '../../redux/chat-selectors'\r\n\r\nimport styles from './ChatPage.module.css'\r\n\r\nimport { startMessagesListeningThunk, stopMessagesListeningThunk } from '../../redux/chat-reducer'\r\n\r\nconst ChatPage: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector(getIsAuth)\r\n  const channelStatus = useSelector(getChannelStatus)\r\n\r\n  useEffect(() => {\r\n    /* При первом рендере диспатчим санку, по которой в API запускается ws канал\r\n    и производится подписка BLL на получение массива messages по каналу*/\r\n    dispatch(startMessagesListeningThunk())\r\n    // Cleanup function\r\n    return () => {\r\n      dispatch(stopMessagesListeningThunk())\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {!isAuth\r\n        ? <Navigate replace to='/login' />\r\n        :\r\n        <>\r\n        {/* При ошибке websocket выведем сообщение об ошибке */}\r\n        { channelStatus === 'error' && alert('Some error with WS-connection occured.')}\r\n          <div className={styles.wrapper}>\r\n            <div className={styles.body}>\r\n              <div className={styles.messagesContainer}>\r\n                <Messages />\r\n              </div>\r\n              <div className={styles.formContainer}>\r\n                <AddMessageForm channelStatus={channelStatus} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(ChatPage)"],"sourceRoot":""}
{"version":3,"sources":["utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Battons/LoginButton/LoginButton.module.css","assets/preloaders/circle.svg","components/common/Battons/LoginButton/LoginButton.tsx","components/LoginPage/LoginReduxForm/LoginReduxForm.module.css","components/LoginPage/LoginPage.module.css","components/LoginPage/LoginReduxForm/LoginReduxForm.tsx","components/LoginPage/LoginPage.tsx"],"names":["required","value","undefined","email","test","loginInput","input","meta","props","hasError","touched","error","className","styles","loginInput__body","cn","loginInput__label","label","requiredLabel","requiredfield","htmlFor","id","loginInput__input","loginInput__error","loginCheckbox","loginCheckbox__body","loginCheckbox__block","loginCheckbox__checkbox","checkbox","loginCheckbox__label","profileInput","profileInput__body","profileInput__label","profileInput__input","profileInput__error","profileTextarea","profileTextarea__body","textarea","profileCheckbox","profileCheckbox__body","module","exports","LoginButton","isDisabled","isFetching","text","submitButton","type","disabled","preloader","_active","src","btnPreloader","alt","React","memo","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","submitting","loginForm","onSubmit","Field","name","component","placeholder","validate","loginForm__captchaImg","captchaImg","loginForm__errorOnSubmit","errorOnSubmit","loginForm__button","button","LoginPage","dispatch","useDispatch","authData","useSelector","getAuthData","isAuth","replace","to","wrapper","loginPage","loginPage__card","loginPage__cardForm","formData","password","rememberMe","captcha","loginThunk","login","loginPage__cardNotice","loginPage__notice","notice__title","notice__emailKey","notice__emailVal","notice__passKey","notice__passVal"],"mappings":"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","file":"static/js/6.1df88d47.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = value => value ? undefined : 'Field is required'\r\n\r\nexport const maxLength = (nmb: number): FieldValidatorType => (value: string) => {\r\n  if (value && value.length > nmb) return `Max length is ${nmb} symbols`\r\n  return undefined\r\n}\r\n\r\nexport const email: FieldValidatorType = (value: string) => {\r\n  if (value && (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value))) {\r\n    return 'Invalid email address'\r\n  }\r\n  return undefined\r\n}\r\n","import React from 'react'\r\nimport { WrappedFieldProps } from 'redux-form'\r\n\r\nimport cn from 'classnames'\r\n\r\nimport styles from './FormsControls.module.css'\r\n\r\ntype ElementOwnPropsType = {\r\n  label?: string\r\n  id?: string\r\n  requiredfield?: 'true' | 'false'\r\n}\r\n\r\nexport const loginInput: React.FC<WrappedFieldProps & ElementOwnPropsType> = ({ input, meta, ...props }) => {\r\n  const hasError: boolean = meta.touched && meta.error\r\n  return (\r\n    <div className={styles.loginInput__body}>\r\n      <label className={cn(styles.loginInput__label, styles.label, { [styles.requiredLabel]: props.requiredfield })} htmlFor={props.id}>{props.label}</label>\r\n      <input {...input} {...props} className={cn(styles.loginInput__input, styles.input)} />\r\n      <div className={cn(styles.loginInput__error, styles.error)}>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const loginCheckbox: React.FC<WrappedFieldProps & ElementOwnPropsType> = ({ input, meta, ...props }) => {\r\n  return (\r\n    <div className={styles.loginCheckbox__body}>\r\n      <div className={styles.loginCheckbox__block}>\r\n        <input {...input} {...props} className={cn(styles.loginCheckbox__checkbox, styles.checkbox)} />\r\n        <label className={styles.loginCheckbox__label} htmlFor={props.id}>{props.label}</label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const profileInput: React.FC<WrappedFieldProps & ElementOwnPropsType> = ({ input, meta, ...props }) => {\r\n  const hasError: boolean = meta.touched && meta.error\r\n  return (\r\n    <div className={styles.profileInput__body}>\r\n      <label className={cn(styles.profileInput__label, styles.label, { [styles.requiredLabel]: props.requiredfield })} htmlFor={props.id}>{props.label}</label>\r\n      <input {...input} {...props} className={cn(styles.profileInput__input, styles.input)} />\r\n      <div className={cn(styles.profileInput__error, styles.error)}>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const profileTextarea: React.FC<WrappedFieldProps & ElementOwnPropsType> = ({ input, meta, ...props }) => {\r\n  const hasError: boolean = meta.touched && meta.error\r\n  return (\r\n    <div className={styles.profileTextarea__body}>\r\n      <label className={cn(styles.profileInput__label, styles.label, { [styles.requiredLabel]: props.requiredfield })} htmlFor={props.id}>{props.label}</label>\r\n      {/* <input {...input} {...props} className={cn(styles.profileInput__input, styles.input)} /> */}\r\n      <textarea {...input} {...props} className={cn(styles.profileInput__input, styles.textarea)} />\r\n      <div className={cn(styles.profileInput__error, styles.error)}>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const profileCheckbox: React.FC<WrappedFieldProps & ElementOwnPropsType> = ({ input, meta, ...props }) => {\r\n  return (\r\n    <div className={styles.profileCheckbox__body}>\r\n      <div className={styles.loginCheckbox__block}>\r\n        <input {...input} {...props} className={cn(styles.loginCheckbox__checkbox, styles.checkbox)} />\r\n        <label className={styles.loginCheckbox__label} htmlFor={props.id}>{props.label}</label>\r\n      </div>\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginInput__body\":\"FormsControls_loginInput__body__FShQI\",\"loginInput__label\":\"FormsControls_loginInput__label__3dy7E\",\"loginInput__input\":\"FormsControls_loginInput__input__1k9As\",\"loginInput__error\":\"FormsControls_loginInput__error__14nEk\",\"loginCheckbox__body\":\"FormsControls_loginCheckbox__body__1XifY\",\"profileInput__body\":\"FormsControls_profileInput__body__1imnC\",\"profileTextarea__body\":\"FormsControls_profileTextarea__body__1Amzu\",\"profileInput__label\":\"FormsControls_profileInput__label__2Mq0F\",\"label\":\"FormsControls_label__2kWq4\",\"requiredLabel\":\"FormsControls_requiredLabel__1-iWL\",\"profileInput__input\":\"FormsControls_profileInput__input__3hUpN\",\"input\":\"FormsControls_input__SLLxI\",\"textarea\":\"FormsControls_textarea__LnVmY\",\"profileInput__error\":\"FormsControls_profileInput__error__2EegU\",\"error\":\"FormsControls_error__3cVED\",\"profileCheckbox__body\":\"FormsControls_profileCheckbox__body__21CEm\",\"loginCheckbox__block\":\"FormsControls_loginCheckbox__block__1ZPo6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitButton\":\"LoginButton_submitButton__qHXee\",\"preloader\":\"LoginButton_preloader__3BoQl\",\"_active\":\"LoginButton__active__CBs1J\"};","export default __webpack_public_path__ + \"static/media/circle.f8e163e5.svg\";","import React from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport styles from './LoginButton.module.css'\r\n\r\nimport btnPreloader from './../../../../assets/preloaders/circle.svg'\r\n\r\ntype PropsType = {\r\n  isDisabled: boolean\r\n  isFetching: boolean\r\n  text: string\r\n}\r\n\r\nconst LoginButton: React.FC<PropsType> = ({ isDisabled, isFetching, text }) => {\r\n  return (\r\n    <button className={styles.submitButton} type=\"submit\" disabled={isDisabled || isFetching}>\r\n      <img className={cn(styles.preloader, { [styles._active]: isFetching })} src={btnPreloader} alt=\"\" />\r\n      <span>{text}</span>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default React.memo(LoginButton)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm__captchaImg\":\"LoginReduxForm_loginForm__captchaImg__1HTD1\",\"loginForm__errorOnSubmit\":\"LoginReduxForm_loginForm__errorOnSubmit__3Lu2d\",\"loginForm__button\":\"LoginReduxForm_loginForm__button__N213s\",\"loginForm\":\"LoginReduxForm_loginForm__3Dt41\",\"captchaImg\":\"LoginReduxForm_captchaImg__Vqk89\",\"errorOnSubmit\":\"LoginReduxForm_errorOnSubmit__LDsrI\",\"button\":\"LoginReduxForm_button__2Rsqc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LoginPage_wrapper__95QEx\",\"loginPage\":\"LoginPage_loginPage__15eCB\",\"loginPage__card\":\"LoginPage_loginPage__card__29qw1\",\"loginPage__cardForm\":\"LoginPage_loginPage__cardForm__3Lo9v\",\"loginPage__notice\":\"LoginPage_loginPage__notice__3cyaC\",\"notice__title\":\"LoginPage_notice__title__1xW-O\",\"notice__emailKey\":\"LoginPage_notice__emailKey__2_YhT\",\"notice__emailVal\":\"LoginPage_notice__emailVal__2a8dZ\",\"notice__passKey\":\"LoginPage_notice__passKey__2kKkM\",\"notice__passVal\":\"LoginPage_notice__passVal__1-FQQ\"};","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\n\r\nimport { required, email } from '../../../utils/validators/validators'\r\nimport { loginInput, loginCheckbox } from '../../common/FormsControls/FormsControls'\r\n\r\nimport styles from './LoginReduxForm.module.css'\r\n\r\nimport LoginButton from '../../common/Battons/LoginButton/LoginButton'\r\n\r\nexport type LoginFormValuesType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\n\r\ntype LoginFormOwnPropsType = {\r\n  captchaUrl: string | null\r\n  isFetching: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType,\r\n  LoginFormOwnPropsType> & LoginFormOwnPropsType>\r\n  = ({ handleSubmit, error, captchaUrl, submitting, isFetching }) => {\r\n\r\n    return (\r\n      <form className={styles.loginForm} onSubmit={handleSubmit}>\r\n\r\n        <Field\r\n          name='email'\r\n          type='email'\r\n          component={loginInput}\r\n          placeholder='Email'\r\n          validate={[required, email]}\r\n          label='Email'\r\n          id=\"login-email\"\r\n          requiredfield=\"true\"\r\n        />\r\n\r\n        <Field\r\n          name='password'\r\n          type='password'\r\n          component={loginInput}\r\n          placeholder='Password'\r\n          validate={[required]}\r\n          label='Password'\r\n          id=\"login-password\"\r\n          requiredfield=\"true\"\r\n        />\r\n\r\n        <Field\r\n          name='rememberMe'\r\n          type='checkbox'\r\n          component={loginCheckbox}\r\n          label='Remember me'\r\n          id=\"login-remember-me\"\r\n        />\r\n\r\n        {captchaUrl &&\r\n          <>\r\n\r\n            <div className={styles.loginForm__captchaImg}>\r\n              <img src={captchaUrl} alt=\"captcha\" className={styles.captchaImg} />\r\n            </div>\r\n\r\n            <Field\r\n              name='captcha'\r\n              type='text'\r\n              component={loginInput}\r\n              placeholder='Captcha'\r\n              validate={[required]}\r\n              label='Captcha'\r\n              id=\"login-captcha\"\r\n              requiredfield=\"true\"\r\n            />\r\n\r\n          </>}\r\n\r\n        {error &&\r\n          <div className={styles.loginForm__errorOnSubmit}>\r\n            <div className={styles.errorOnSubmit}>\r\n              {error}\r\n            </div>\r\n          </div>\r\n        }\r\n\r\n        <div className={styles.loginForm__button}>\r\n          <div className={styles.button}>\r\n            <LoginButton isDisabled={submitting} isFetching={isFetching} text=\"Login\" />\r\n          </div>\r\n        </div>\r\n\r\n      </form>\r\n    )\r\n  }\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({ form: 'login' })(LoginForm)\r\n\r\nexport default LoginReduxForm","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport cn from 'classnames'\r\n\r\nimport LoginReduxForm, { LoginFormValuesType } from './LoginReduxForm/LoginReduxForm'\r\n\r\nimport { loginThunk } from '../../redux/auth-reducer'\r\n// import { getCaptchaUrl, getIsAuth, getIsFetching } from '../../redux/auth-selectors'\r\nimport { getAuthData } from '../../redux/auth-selectors'\r\n\r\nimport styles from './LoginPage.module.css'\r\n\r\nconst LoginPage: React.FC = () => {\r\n  // Todo: Enable Preloader when data is fetching\r\n  const dispatch = useDispatch()\r\n  const login = (email: string, password: string, rememberMe: boolean, captcha: string | null) =>\r\n    dispatch(loginThunk(email, password, rememberMe, captcha))\r\n\r\n  // const isAuth = useSelector(getIsAuth)\r\n  // const captchaUrl = useSelector(getCaptchaUrl)\r\n  // const isFetching = useSelector(getIsFetching)\r\n  const authData = useSelector(getAuthData)\r\n\r\n  const { isAuth, captchaUrl, isFetching, id } = authData\r\n\r\n\r\n  /* onSubmit передается в пропсах в child component и определяет,\r\n  что делать с собранными формой данными formData.\r\n  Используем эти formData (через деструктуризацию) для логинизации -\r\n  диспатчим из onSubmit formData через POST запрос на API для\r\n  авторизации на сервере стороннего сервиса */\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    const { email, password, rememberMe, captcha } = formData\r\n    login(email, password, rememberMe, captcha)\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Navigate replace to={`/profile/${id}`} />\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.loginPage}>\r\n\r\n        {/* Form */}\r\n\r\n        <div className={cn(styles.loginPage__card, styles.loginPage__cardForm)}>\r\n          <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} isFetching={isFetching} />\r\n        </div>\r\n\r\n        {/* Form notice */}\r\n\r\n        <div className={cn(styles.loginPage__card, styles.loginPage__cardNotice)}>\r\n          <div className={styles.loginPage__notice}>\r\n            <div className={styles.notice__title}>Test account details:</div>\r\n            <span className={styles.notice__emailKey}>Email:</span> <strong className={styles.notice__emailVal}>free@samuraijs.com</strong>\r\n            <span className={styles.notice__passKey}>Password:</span> <strong className={styles.notice__passVal}>free</strong>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default React.memo(LoginPage)"],"sourceRoot":""}
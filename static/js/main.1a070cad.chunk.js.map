{"version":3,"sources":["api/api.ts","components/Header/Header.module.css","App.module.css","redux/app-reducer.ts","redux/store-redux.tsx","redux/app-selectors.ts","helpers/menuList.tsx","components/Menu/Menu.tsx","components/Header/Header.tsx","components/Aside/Aside.tsx","components/Footer/Footer.tsx","App.tsx","index.js","components/Menu/Menu.module.css","api/authAPI.ts","redux/auth-reducer.ts","redux/auth-selectors.ts","api/profileAPI.ts","redux/profile-reducer.ts","assets/preloaders/spinning-circles.svg","components/common/Preloader/Preloader.tsx","components/Footer/Footer.module.css","redux/users-reducer.ts","assets/images/defaultUserImage.jpg","api/usersAPI.ts","api/chatAPI.ts","redux/chat-reducer.ts","redux/profile-selectors.ts","components/Aside/Aside.module.css","components/common/Preloader/Preloader.module.css"],"names":["instanceAxios","axios","create","withCredentials","baseURL","headers","module","exports","SET_APP_INITIALIZED","actionCreators","type","initialState","isAppInitialized","appReducer","state","action","rootReducer","combineReducers","profile","profileReduser","users","usersReduser","auth","authReducer","form","formReducer","app","chat","chatReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","getIsAppInitialized","menuList","name","url","Menu","props","activeLink","cn","styles","menu__link","menu__link_active","normalLink","linkClassNameDefinition","isActive","className","menu","menu__prevBlock","menu__body","map","item","to","onClick","onLinkClick","React","memo","Header","dispatch","useDispatch","authData","useSelector","getAuthData","isAuth","getIsAuth","myProfileInfo","getMyProfileInfo","useState","burgerOn","setBurgerOn","header","container","header__row","header__logo","header__block","header__authBlock","logoutThunk","header__avatar","src","photos","small","defaultUserImage","alt","avatar","avatarToolpTip","login","id","prevState","document","body","classList","toggle","header__menu","burger","_active","ReactDOM","createPortal","burgerMenu","menuWrapper","event","remove","getElementById","Aside","aside","Footer","footer","footer__copyright","ProfilePage","lazy","UsersPage","LoginPage","ChatPage","App","catchAllUnhandledErrors","alert","reason","console","error","initializeApp","getState","promise1","getAuthDataThunk","then","myId","setUserProfileThunk","Promise","all","useEffect","addEventListener","removeEventListener","wrapper","mainRow","mainRow__container","mainRow__wrapper","main","fallback","Preloader","path","element","replace","render","authAPI","get","response","data","email","password","rememberMe","captcha","post","delete","SET_USER_AUTH_DATA","RESET_USER_AUTH_DATA","GET_CAPTCHA_URL_SUCCESS","SET_IS_FETCHING","captchaUrl","isFetching","resultCode","loginThunk","ErrorMessage","messages","length","stopSubmit","_error","getAuthId","profileAPI","userId","myStatus","put","status","file","formData","FormData","append","profileData","ADD_POST","SET_USER_PROFILE","SET_MY_PROFILE","SET_USER_STATUS","SET_MY_STATUS","UPDATE_MY_STATUS","UPDATE_MY_PHOTO","updateMyStatusThunk","setMyStatusThunk","setUserStatusThunk","isOwner","updateProfileThunk","reject","savePhotoThunk","profilePosts","likesCount","userProfile","userStatus","myProfile","newPostId","newPostObj","postText","appPreloader","preloader","FOLLOW_TOGGLE","SET_USERS","SET_TOTAL_COUNT","SET_CURRENT_PAGE","TOGGLE_IS_FETCHING","IS_FOLLOWING_IN_PROGRESS_TOGGLE","SET_USERS_FILTER","setUsersFilterAC","usersFilter","term","friend","payload","followToggleAC","setUsersAC","usersList","setTotalCountAC","totalCount","setCurrentPageAC","currentPage","toggleIsFetchingAC","isFollowingToggleAC","followingUserId","requestUsersThunk","usersOnPageCount","usersAPI","getUsers","items","isFollowingInProgress","user","followed","tempArr","indexOf","filter","queryParameters","setUserFollow","setUserUnfollow","subscribers","ws","onCloseHandler","notifySubscribersAboutStatus","setTimeout","createWsChannel","onMessageHandler","e","newMessages","JSON","parse","forEach","s","onOpenHandler","onErrorHandler","cleanUpFunction","close","WebSocket","chatAPI","eventName","callback","push","message","send","MESSAGES_RECEIVED","MESSAGES_CLEARED","STATUS_CHANGED","apiMessages","m","v1","index","array","_newMessagesHandler","newMessagesHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListeningThunk","stopMessagesListeningThunk","sendMessageThunk","getUserProfileInfo","getUserStatus","getMyStatus","getIsFetching"],"mappings":"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","file":"static/js/main.1a070cad.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instanceParameters = {\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: { \"API-KEY\": \"185399ed-5bf1-4614-a945-6c901c6ff6b3\" },\r\n}\r\n\r\nexport const instanceAxios = axios.create(\r\n  { ...instanceParameters }\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__GBlRf\",\"container\":\"Header_container__3VAuY\",\"header__row\":\"Header_header__row__9rRPH\",\"header__logo\":\"Header_header__logo__1QZmN\",\"header__block\":\"Header_header__block__2Kro9\",\"_unregistered\":\"Header__unregistered__1_L0n\",\"header__avatar\":\"Header_header__avatar__1SO1u\",\"avatar\":\"Header_avatar__1fsGt\",\"avatarToolpTip\":\"Header_avatarToolpTip__Gt60Z\",\"header__authBlock\":\"Header_header__authBlock__3VZto\",\"burger\":\"Header_burger__14yHT\",\"_active\":\"Header__active__NTfLI\",\"burgerMenu\":\"Header_burgerMenu__11-EH\",\"menuWrapper\":\"Header_menuWrapper__LfomX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2O0ML\",\"header\":\"App_header__QNvib\",\"mainRow__container\":\"App_mainRow__container__x2k6z\",\"mainRow__wrapper\":\"App_mainRow__wrapper__3Sxtc\",\"aside\":\"App_aside__kLIxR\",\"main\":\"App_main__1NrXX\",\"footer\":\"App_footer__3rYjV\"};","import { getAuthDataThunk } from './auth-reducer'\r\nimport { setUserProfileThunk } from './profile-reducer'\r\nimport { InferActionsTypes, BaseThunkType } from './store-redux'\r\n\r\nconst SET_APP_INITIALIZED = 'social_network/app/SET_APP_INITIALIZED'\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actionCreators>\r\n\r\nconst actionCreators = {\r\n  appInitSuccess: () => {\r\n    return { type: SET_APP_INITIALIZED } as const\r\n  }\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\n\r\nexport const initializeAppThunk = (): ThunkType => {\r\n  return (dispatch, getState) => {\r\n    const promise1 = dispatch(getAuthDataThunk()).then(() => {\r\n      // Добавляем фичу, чтобы при реиницилизации приложения запрашивался не только статус авторизации, но и если юзер \r\n      // авторизован, запрашивалась информация по профилю владельца акка - нужно для того, чтобы при обновлении окна\r\n      // и переинициализации приложения из стора не пропадали данные профайла owner-а: к примеру пропадет его автврка, \r\n      // если refresh произойдет на странице, отличной от profilePage.\r\n      const myId = getState()?.auth.id\r\n      if (myId) {\r\n        dispatch(setUserProfileThunk(myId))\r\n      }\r\n    })\r\n    Promise.all([promise1])\r\n      .then(() => {\r\n        dispatch(actionCreators.appInitSuccess())\r\n      })\r\n  }\r\n}\r\n\r\n// getState().app\r\nconst initialState = {\r\n  isAppInitialized: false\r\n}\r\n\r\ntype StateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: ActionTypes): StateType => {\r\n  switch (action.type) {\r\n\r\n    case SET_APP_INITIALIZED:\r\n      return {\r\n        ...state,\r\n        isAppInitialized: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default appReducer","import { combineReducers, createStore, applyMiddleware, compose, Action } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport profileReduser from './profile-reducer'\r\nimport usersReduser from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport appReducer from './app-reducer'\r\nimport chatReducer from './chat-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  profile: profileReduser,\r\n  users: usersReduser,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// type InferActionsTypes<T> определяет тип actions, которые подаются на вход редьюсеров\r\n// где T = typeof actionCreators\r\n// actionCreators = {AC1: (...args) => any, AC2: (...args) => any} - сборный объект всех actionCreators редьюсора\r\n// Таким образом мы просто добавляем AC в объект actionCreators, а union-тип экшенов сам обновляется\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\n// export type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\nexport type BaseThunkType<A extends Action = Action, R = any> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// let store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// window.store = store\r\n\r\nexport default store","import {AppStateType} from './store-redux'\r\n\r\nexport const getIsAppInitialized = (state: AppStateType) => state.app.isAppInitialized","export const menuList = [\r\n  {\r\n    name: \"Profile\",\r\n    url: \"/profile\"\r\n  },\r\n  {\r\n    name: \"Users\",\r\n    url: \"/users\"\r\n  },\r\n  {\r\n    name: \"Chat\",\r\n    url: \"/chat\"\r\n  }\r\n]\r\n","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport cn from 'classnames'\r\n\r\nimport styles from \"./Menu.module.css\"\r\n\r\nimport { menuList } from \"../../helpers/menuList\";\r\n\r\ntype PropsType = {\r\n  onLinkClick?: (e: any) => void\r\n}\r\n\r\nconst Menu: React.FC<PropsType> = (props) => {\r\n\r\n  // Ф-ция linkClassNameDefinition определяет стилизацию для пунктов меню.\r\n  // Если {isActive} true, то этот элемент отображен.\r\n  // <NavLink to=\"/\" className={linkClassNameDefinition}>\r\n\r\n  const activeLink: string = cn(styles.menu__link, styles.menu__link_active)\r\n  const normalLink: string = styles.menu__link\r\n  const linkClassNameDefinition = ({ isActive }: { isActive: boolean }): string => isActive ? activeLink : normalLink\r\n\r\n  return (\r\n    <div className={styles.menu}>\r\n\r\n      <div className={styles.menu__prevBlock}>\r\n        {/* For some content */}\r\n      </div>\r\n\r\n      <nav className={styles.menu__body}>\r\n        {menuList.map((item) => {\r\n          return (\r\n            <NavLink\r\n              key={item.name}\r\n              to={item.url}\r\n              className={linkClassNameDefinition}\r\n              onClick={props.onLinkClick}\r\n            >\r\n              {item.name}\r\n            </NavLink>\r\n          )\r\n        })\r\n        }\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(Menu)","import React, { useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport cn from 'classnames'\r\n\r\nimport styles from './Header.module.css'\r\n\r\nimport { logoutThunk } from '../../redux/auth-reducer'\r\nimport { getAuthData, getIsAuth } from '../../redux/auth-selectors'\r\nimport { getMyProfileInfo } from '../../redux/profile-selectors'\r\nimport Menu from '../Menu/Menu'\r\nimport defaultUserImage from './../../assets/images/defaultUserImage.jpg'\r\n\r\nconst Header: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const authData = useSelector(getAuthData)\r\n  const isAuth = useSelector(getIsAuth)\r\n  const logout = () => dispatch(logoutThunk())\r\n  const myProfileInfo = useSelector(getMyProfileInfo)\r\n\r\n  const [burgerOn, setBurgerOn] = useState(false)\r\n\r\n  const onBurgerClick = () => {\r\n    setBurgerOn((prevState) => prevState ? false : true)\r\n    document.body.classList.toggle('_scrolling-lock')\r\n  }\r\n\r\n  const onLinkClick = (event: Event) => {\r\n    // event.preventDefault()\r\n    setBurgerOn(false)\r\n    document.body.classList.remove('_scrolling-lock')\r\n  }\r\n\r\n  return (\r\n\r\n    <header className={styles.header}>\r\n      <div className={styles.container}>\r\n        <div className={styles.header__row}>\r\n\r\n          <Link to='/' className={styles.header__logo}>\r\n            <strong>IT</strong> Social\r\n          </Link>\r\n\r\n          {isAuth &&\r\n            <div className={styles.header__block}>\r\n              <div className={styles.header__authBlock}>\r\n                <div>\r\n                  <button onClick={logout}>Logout</button>\r\n                </div>\r\n                <div className={styles.header__avatar}>\r\n                  <img\r\n                    src={myProfileInfo && myProfileInfo.photos.small ? myProfileInfo.photos.small : defaultUserImage}\r\n                    alt=\"userAvatar\"\r\n                    className={styles.avatar}\r\n                  />\r\n                  <div className={styles.avatarToolpTip}>\r\n                    <p>{`Hello, ${authData.login}.`}</p>\r\n                    <p>{`Your id: ${authData.id}`}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Burger */}\r\n\r\n              <button onClick={onBurgerClick}>\r\n                <div className={cn(styles.header__menu, styles.burger, {\r\n                  [styles._active]: burgerOn\r\n                })}>\r\n                  <span></span>\r\n                </div>\r\n              </button>\r\n            </div>\r\n          }\r\n\r\n\r\n          {\r\n            burgerOn && ReactDOM.createPortal(\r\n              <div className={styles.burgerMenu}>\r\n                <div className={styles.menuWrapper}>\r\n                  <Menu onLinkClick={onLinkClick} />\r\n                </div>\r\n              </div>\r\n              , document.getElementById('root') as Element)\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n    </header>\r\n\r\n    // <header className={styles.header}{headerStyles.header}>\r\n    //   <img src={logo} alt=\"logo\" />\r\n    //   <div className={styles.header}{headerStyles.loginBlock}>\r\n    //     {authData.isAuth\r\n    //       ? (\r\n    //         <div>\r\n    //           <div>Hello {authData.login}. Your id: {authData.id}</div>\r\n    //           {/* <div>Your id: {props.id}</div> */}\r\n    //           <button onClick={logout}>Logout</button>\r\n    //         </div>\r\n    //       )\r\n    //       : <Link to={'/login'}>Login</Link>}\r\n    //   </div>\r\n    // </header>\r\n  )\r\n}\r\n\r\nexport default React.memo(Header)\r\n","import React from 'react'\r\n\r\nimport Menu from '../Menu/Menu'\r\nimport styles from './Aside.module.css'\r\n\r\nconst Aside: React.FC = () => {\r\n\r\n  return (\r\n    <>\r\n      <aside className={styles.aside}>\r\n        <Menu />\r\n\r\n      </aside>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(Aside)\r\n","import React from 'react'\r\n\r\nimport styles from './Footer.module.css'\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <footer className={styles.footer}>\r\n        <div className={styles.footer__copyright}>© 2022 vvliumanov</div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default React.memo(Footer)\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { Routes, Route, Navigate } from 'react-router-dom'\r\n// import { BrowserRouter } from 'react-router-dom'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getIsAppInitialized } from './redux/app-selectors'\r\nimport { initializeAppThunk } from './redux/app-reducer'\r\n\r\nimport { getAuthData } from './redux/auth-selectors'\r\n\r\nimport styles from './App.module.css'\r\n\r\nimport Header from './components/Header/Header'\r\nimport Aside from './components/Aside/Aside'\r\nimport Footer from './components/Footer/Footer'\r\nimport Preloader from './components/common/Preloader/Preloader'\r\n\r\n/* Используем ф-цию lazy для организации бандлинга и 'ленивой' загрузки компонент из роутинга.\r\nВ качесте аргумента lazy используется ф-ция динамической загрузки компонента. Lazy позволяет\r\nотображать динамический импорт в качестве компонента и подгружает компонент при необходимости\r\nпри его первом рендере.\r\nПри этом при подгрузке bundle возможны задержки, поэтому для better UIE используется обертка Suspense,\r\nпозволяющая во время загрузки отображать fallback (в нашем случае компонент Preloader).\r\n*/\r\nconst ProfilePage = lazy(() => import('./components/ProfilePage/ProfilePage'))\r\nconst UsersPage = lazy(() => import('./components/UsersPage/UsersPage'))\r\nconst LoginPage = lazy(() => import('./components/LoginPage/LoginPage'))\r\nconst ChatPage = lazy(() => import('./components/ChatPage/ChatPage'))\r\n\r\nconst App: React.FC = (props) => {\r\n\r\n  const dispatch = useDispatch()\r\n  const isAppInitialized = useSelector(getIsAppInitialized)\r\n\r\n  const authData = useSelector(getAuthData)\r\n  const { isAuth, id } = authData\r\n\r\n  /*\r\n  метод для обработки rejected промисов (необработанных)\r\n  вместо алерта можно запилить dispatch thunk-и, по которой мы будем изменять значение в state.app.globalError\r\n  by default is null. Туда можем сохранить текст ошибки (или еще какую инфу), потом эту ошибку вывести в UI\r\n  красиво во всплывающем окне, затем через setTimeOut поле state.app.globalError обнулить - для повторения запроса\r\n  ну или запросить у юзера нажать button for retry\r\n  */\r\n\r\n  const catchAllUnhandledErrors = (event: PromiseRejectionEvent) => {\r\n    alert(event.reason)\r\n    console.error(event)\r\n  }\r\n\r\n  const initializeApp = () => dispatch(initializeAppThunk())\r\n\r\n  useEffect(() => {\r\n    initializeApp()\r\n    //добавляем событие, по которому мы обрабатываем все необработанные отклоненные rejected промисы\r\n    window.addEventListener(\"unhandledrejection\", catchAllUnhandledErrors)\r\n    return () => {\r\n      // зачищаем мусор перед демонтированием компоненты\r\n      window.removeEventListener(\"unhandledrejection\", catchAllUnhandledErrors)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {!isAppInitialized\r\n        ? <Preloader />\r\n        :\r\n        <>\r\n          {/* <BrowserRouter> */}\r\n          <HashRouter>\r\n            <div className={styles.wrapper}>\r\n\r\n              <div className={styles.header}>\r\n                <Header />\r\n              </div>\r\n\r\n              <div className={styles.mainRow}>\r\n\r\n                <div className={styles.mainRow__container}>\r\n\r\n                  <div className={styles.mainRow__wrapper}>\r\n\r\n                    {isAuth &&\r\n                      <div className={styles.aside}>\r\n                        <Aside />\r\n                      </div>\r\n                    }\r\n\r\n                    <div className={styles.main}>\r\n                      <Suspense fallback={<Preloader />}>\r\n                        <Routes>\r\n                          <Route path='/' element={<Navigate replace to={`/profile/${id}`} />} />\r\n                          <Route path='/profile' element={<Navigate replace to={`/profile/${id}`} />} />\r\n                          <Route path='/profile/:userId' element={<ProfilePage />} />\r\n                          <Route path='/users' element={<UsersPage />} />\r\n                          <Route path='/login' element={<LoginPage />} />\r\n                          <Route path='/chat' element={<ChatPage />} />\r\n                          <Route path='*' element={<div>404 NOT FOUND</div>} />\r\n                        </Routes>\r\n                      </Suspense>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className={styles.footer}>\r\n                <Footer />\r\n              </div>\r\n\r\n            </div>\r\n          </HashRouter>\r\n          {/* </BrowserRouter> */}\r\n        </>\r\n      }\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n// import { BrowserRouter } from 'react-router-dom'\r\n// import { HashRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport store from './redux/store-redux'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__2zsQd\",\"menu__prevBlock\":\"Menu_menu__prevBlock__i-vHW\",\"menu__body\":\"Menu_menu__body__2TZ1e\",\"menu__link\":\"Menu_menu__link__2ebOC\",\"menu__link_active\":\"Menu_menu__link_active__2xuIF\"};","import { instanceAxios } from './api'\r\nimport { MainResponseType } from '../types/types'\r\n\r\nexport type AuthDataType = {\r\n  id: number\r\n  login: string\r\n  email: string\r\n}\r\nexport type LoginType = {\r\n  id: number\r\n  login: string\r\n  email: string\r\n}\r\nexport type GetCaptchaUrlResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const authAPI = {\r\n  getAuthData() {\r\n    return instanceAxios.get<MainResponseType<AuthDataType>>('auth/me').then(response => response.data);\r\n  },\r\n  loginOnTheService(email: string, password: string, rememberMe: boolean = false, captcha: string | null) {\r\n    return instanceAxios.post<MainResponseType<LoginType>>('auth/login', { email, password, rememberMe, captcha }).then(response => response.data);\r\n  },\r\n  logoutFromTheService() {\r\n    return instanceAxios.delete<MainResponseType>('auth/login').then(response => response.data);\r\n  },\r\n  getCaptchaUrl() {\r\n    return instanceAxios.get<GetCaptchaUrlResponseType>('/security/get-captcha-url').then(response => response.data);\r\n  }\r\n}\r\n","import { stopSubmit, FormAction } from 'redux-form'\r\nimport { authAPI } from \"../api/authAPI\"\r\nimport { Nullable } from '../types/types'\r\nimport { InferActionsTypes, BaseThunkType } from './store-redux'\r\n\r\nconst SET_USER_AUTH_DATA = 'social_network/auth/SET_USER_AUTH_DATA'\r\nconst RESET_USER_AUTH_DATA = 'social_network/auth/RESET_USER_AUTH_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'social_network/auth/GET_CAPTCHA_URL_SUCCESS'\r\nconst SET_IS_FETCHING = 'social_network/auth/SET_IS_FETCHING'\r\n\r\nexport type AuthDataType = {\r\n  id: number,\r\n  login: string,\r\n  email: string,\r\n}\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actionCreators>\r\n\r\nconst actionCreators = {\r\n  getCaptchaUrlSuccess: (captchaUrl: string) => {\r\n    return { type: GET_CAPTCHA_URL_SUCCESS, captchaUrl } as const\r\n  },\r\n  setUserAuthData: (authData: AuthDataType) => {\r\n    return { type: SET_USER_AUTH_DATA, authData } as const\r\n  },\r\n  resetAuthData: () => {\r\n    return { type: RESET_USER_AUTH_DATA } as const\r\n  },\r\n  setIsFetching: (isFetching: boolean) => {\r\n    return { type: SET_IS_FETCHING, isFetching } as const\r\n  }\r\n  \r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes | FormAction>\r\n\r\nexport const getCaptchaUrlThunk = (): ThunkType => {\r\n  return (dispatch) => {\r\n    return authAPI.getCaptchaUrl().then((data) => {\r\n      dispatch(actionCreators.getCaptchaUrlSuccess(data.url))\r\n      dispatch(actionCreators.setIsFetching(false))\r\n    })\r\n  }\r\n}\r\n\r\nexport const getAuthDataThunk = (): ThunkType => {\r\n  return (dispatch) => {\r\n    return authAPI.getAuthData().then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(actionCreators.setUserAuthData(data.data))\r\n        dispatch(actionCreators.setIsFetching(false))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const loginThunk = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => {\r\n  return (dispatch) => {\r\n    dispatch(actionCreators.setIsFetching(true))\r\n    authAPI.loginOnTheService(email, password, rememberMe, captcha).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(getAuthDataThunk())\r\n      }\r\n      else {\r\n        if (data.resultCode === 10) {\r\n          dispatch(getCaptchaUrlThunk())\r\n        }\r\n        let ErrorMessage = data.messages.length > 0 ? data.messages[0] : 'Somthing wrong'\r\n        let action = stopSubmit('login', { _error: ErrorMessage })\r\n        dispatch(action)\r\n        dispatch(actionCreators.setIsFetching(false))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const logoutThunk = (): BaseThunkType => {\r\n  return (dispatch) => {\r\n    authAPI.logoutFromTheService().then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(actionCreators.resetAuthData())\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// getState().auth\r\n\r\nconst initialState = {\r\n  id: null as Nullable<number>,\r\n  login: null as Nullable<string>,\r\n  email: null as Nullable<string>,\r\n  isAuth: false,\r\n  captchaUrl: null as Nullable<string>,\r\n  isFetching: false\r\n}\r\n\r\nexport type StateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): StateType => {\r\n  switch (action.type) {\r\n\r\n    case SET_USER_AUTH_DATA:\r\n      return {\r\n        ...state,\r\n        id: action.authData.id,\r\n        login: action.authData.login,\r\n        email: action.authData.email,\r\n        isAuth: true,\r\n      }\r\n\r\n    case RESET_USER_AUTH_DATA:\r\n      return {\r\n        ...state,\r\n        ...initialState\r\n      }\r\n\r\n    case GET_CAPTCHA_URL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl\r\n      }\r\n\r\n    case SET_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default authReducer","import {AppStateType} from './store-redux'\r\n\r\nexport const getIsAuth = (state: AppStateType) => state.auth.isAuth\r\nexport const getAuthId = (state: AppStateType) => state.auth.id\r\nexport const getCaptchaUrl = (state: AppStateType) => state.auth.captchaUrl\r\nexport const getAuthData = (state: AppStateType) => state.auth\r\n\r\nexport const getIsFetching = (state: AppStateType) => state.auth.isFetching","import { instanceAxios } from './api'\r\nimport { ProfileType, PhotosType, MainResponseType } from '../types/types'\r\n\r\nexport type UpdateProfileResponseType = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: {}\r\n  fieldsErrors: []\r\n}\r\n\r\nexport const profileAPI = {\r\n  getUserProfile(userId: number | null) {\r\n    return instanceAxios.get<ProfileType>(`profile/${userId}`).then(response => response.data);\r\n  },\r\n\r\n  getUserStatus(userId: number) {\r\n    return instanceAxios.get<string | null>(`profile/status/${userId}`).then(response => response.data);\r\n  },\r\n\r\n  getMyStatus(myId: number) {\r\n    return instanceAxios.get<string | null>(`profile/status/${myId}`).then(response => response.data);\r\n  },\r\n\r\n  putMyStatus(myStatus: string) {\r\n    return instanceAxios.put<MainResponseType>('profile/status/', { status: myStatus }).then(response => response.data);\r\n  },\r\n\r\n  savePhoto(file: any) {\r\n    const formData = new FormData();\r\n    formData.append('image', file);\r\n    return instanceAxios.put<MainResponseType<{ photos: PhotosType }>>('profile/photo/', formData, { headers: { 'Content-type': 'multipart/form-data' } })\r\n      .then(response => response.data);\r\n  },\r\n\r\n  updateProfile(profileData: ProfileType) {\r\n    return instanceAxios.put<MainResponseType>('profile/', profileData)\r\n      .then(response => response.data);\r\n  }\r\n}\r\n","import { FormAction, stopSubmit } from 'redux-form'\r\nimport { profileAPI } from \"../api/profileAPI\"\r\nimport { PhotosType, ProfileType, Nullable } from '../types/types'\r\nimport { InferActionsTypes, BaseThunkType } from './store-redux'\r\n\r\nconst ADD_POST = 'social_network/profile/ADD-POST'\r\nconst SET_USER_PROFILE = 'social_network/profile/SET_USER_PROFILE'\r\nconst SET_MY_PROFILE = 'social_network/profile/SET_MY_PROFILE'\r\nconst SET_USER_STATUS = 'social_network/profile/SET_USER_STATUS'\r\nconst SET_MY_STATUS = 'social_network/profile/SET_MY_STATUS'\r\nconst UPDATE_MY_STATUS = 'social_network/profile/UPDATE_MY_STATUS'\r\nconst UPDATE_MY_PHOTO = 'social_network/profile/UPDATE_MY_PHOTO'\r\nconst SET_IS_FETCHING = 'social_network/profile/SET_IS_FETCHING'\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes | FormAction>\r\n\r\n\r\n\r\n// Action creators\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actionCreators>\r\n\r\nexport const actionCreators = {\r\n  updateMyPhotoSuccess: (photos: PhotosType) => {\r\n    return {\r\n      type: UPDATE_MY_PHOTO,\r\n      photos\r\n    } as const\r\n  },\r\n  updateMyStatus: (myStatus: string) => {\r\n    return {\r\n      type: UPDATE_MY_STATUS,\r\n      myStatus\r\n    } as const\r\n  },\r\n  setMyStatus: (myStatus: Nullable<string>) => {\r\n    return {\r\n      type: SET_MY_STATUS,\r\n      myStatus\r\n    } as const\r\n  },\r\n  setUserStatus: (status: Nullable<string>) => {\r\n    return {\r\n      type: SET_USER_STATUS,\r\n      status\r\n    } as const\r\n  },\r\n  setUserProfile: (profile: Nullable<ProfileType>) => {\r\n    return {\r\n      type: SET_USER_PROFILE,\r\n      profile\r\n    } as const\r\n  },\r\n  setMyProfile: (profile: Nullable<ProfileType>) => {\r\n    return {\r\n      type: SET_MY_PROFILE,\r\n      profile\r\n    } as const\r\n  },\r\n  addPost: (postText: string) => {\r\n    return {\r\n      type: ADD_POST,\r\n      postText\r\n    } as const\r\n  },\r\n  setIsFetching: (isFetching: boolean) => {\r\n    return { type: SET_IS_FETCHING, isFetching } as const\r\n  }\r\n\r\n}\r\n\r\n// Thunk creators\r\n\r\nexport const updateMyStatusThunk = (myStatus: string): ThunkType => {\r\n  return (dispatch) => {\r\n    profileAPI.putMyStatus(myStatus).then((data) => {\r\n      if (data.resultCode === 0) dispatch(actionCreators.updateMyStatus(myStatus))\r\n    })\r\n  }\r\n}\r\n\r\nexport const setMyStatusThunk = (userId: number): ThunkType => {\r\n  return (dispatch) => {\r\n    profileAPI.getMyStatus(userId).then((status) => dispatch(actionCreators.setMyStatus(status)))\r\n  }\r\n}\r\n\r\nexport const setUserStatusThunk = (userId: number): ThunkType => {\r\n  return (dispatch) => {\r\n    profileAPI.getUserStatus(userId).then((status) => dispatch(actionCreators.setUserStatus(status)))\r\n  }\r\n}\r\n\r\nexport const setUserProfileThunk = (userId: number | null): ThunkType => {\r\n  return (dispatch, getState) => {\r\n    const myId = getState().auth.id\r\n    const isOwner = (userId === myId)\r\n    dispatch(actionCreators.setIsFetching(true))\r\n    profileAPI.getUserProfile(userId).then((data) => {\r\n      if (isOwner) {\r\n        dispatch(actionCreators.setMyProfile(data))\r\n      } else {\r\n        dispatch(actionCreators.setUserProfile(data))\r\n      }\r\n      dispatch(actionCreators.setIsFetching(false))\r\n    })\r\n  }\r\n}\r\n\r\n// Санка апдейтит myProfile, но в стейте апдейтится userProfile !!!!!!!\r\n// НАДА: получаем из формы измененный профиль formData, отправляем через АПИ на сервер,\r\n// получаем ответ с сервера об успешной записи изменений, считываем через АПИ профайл-дату\r\n// и записываем в стейт\r\n\r\nexport const updateProfileThunk = (profileData: ProfileType): ThunkType => {\r\n  return (dispatch, getState) => {\r\n    const userId = getState().auth.id\r\n    dispatch(actionCreators.setIsFetching(true))\r\n    return profileAPI.updateProfile(profileData).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(setUserProfileThunk(userId))\r\n      }\r\n      else {\r\n        dispatch(actionCreators.setIsFetching(false))\r\n        dispatch(stopSubmit('profile', { _error: data.messages }))\r\n        return Promise.reject(data.messages)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const savePhotoThunk = (file: File): ThunkType => {\r\n  return (dispatch) => {\r\n    profileAPI.savePhoto(file).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(actionCreators.updateMyPhotoSuccess(data.data.photos))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const updatePhotoThunk = () => {\r\n\r\n}\r\n\r\nexport type ProfilePostType = {\r\n  id: number\r\n  post: string\r\n  likesCount: number\r\n}\r\n\r\n// state = state.profile\r\n\r\n/*\r\nОписание ветки state.profile:\r\n  profilePosts - моковые значения постов юзера (или владельца). Их нет в АПИ\r\n  userProfile - объект данных о пользователе (владельце). Меняется при каждой смене id.\r\n    Todo: сделать ветку myProfile - чисто с данными владельца. Будет удобно из любого места достучаться к данным владельца,\r\n    не делая доп. запросов на сервер. Разделим профайлы юзеров и владельца.\r\n  userStatus - статус юзера.\r\n  myStatus - статус владельца. Просто так реализован АПИ.\r\n  isFetching - флаг загрузки данных с сервера.\r\n*/\r\n\r\nconst initialState = {\r\n  profilePosts: [\r\n    {\r\n      id: 1,\r\n      post: 'It is my first post!',\r\n      likesCount: 20\r\n    },\r\n    {\r\n      id: 2,\r\n      post: 'How are you?',\r\n      likesCount: 10\r\n    }\r\n  ] as Array<ProfilePostType>,\r\n  userProfile: null as Nullable<ProfileType>,\r\n  userStatus: null as Nullable<string>,\r\n  myProfile: null as Nullable<ProfileType>,\r\n  myStatus: null as Nullable<string>,\r\n  isFetching: false\r\n}\r\n\r\ntype StateType = typeof initialState\r\n\r\nconst profileReduser = (state: StateType = initialState, action: ActionTypes): any => {\r\n  switch (action.type) {\r\n\r\n    case UPDATE_MY_PHOTO:\r\n      return {\r\n        ...state,\r\n        myProfile: { ...state.myProfile, photos: {...action.photos} }\r\n      }\r\n\r\n    case ADD_POST:\r\n      const newPostId = state.profilePosts[state.profilePosts.length - 1].id + 1\r\n      const newPostObj = {\r\n        id: newPostId,\r\n        post: action.postText,\r\n        likesCount: 0\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        profilePosts: [...state.profilePosts, newPostObj],\r\n      }\r\n\r\n    /* \r\n      case UPDATE_POST:\r\n        return {\r\n          ..state,\r\n          newPost: action.text\r\n        }\r\n    */\r\n\r\n    case SET_USER_PROFILE:\r\n      // https://social-network.samuraijs.com/api/1.0/profile/2\r\n\r\n      return {\r\n        ...state,\r\n        userProfile: action.profile\r\n      }\r\n\r\n    case SET_MY_PROFILE:\r\n\r\n      return {\r\n        ...state,\r\n        myProfile: action.profile\r\n      }\r\n\r\n    case SET_USER_STATUS:\r\n      return {\r\n        ...state,\r\n        userStatus: action.status\r\n      }\r\n\r\n    case SET_MY_STATUS:\r\n      return {\r\n        ...state,\r\n        myStatus: action.myStatus\r\n      }\r\n\r\n    case UPDATE_MY_STATUS:\r\n      return {\r\n        ...state,\r\n        myStatus: action.myStatus\r\n      }\r\n\r\n    case SET_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default profileReduser","export default __webpack_public_path__ + \"static/media/spinning-circles.f9cec7aa.svg\";","import React from 'react'\r\n\r\nimport styles from './Preloader.module.css'\r\n\r\nimport preloader from './../../../assets/preloaders/spinning-circles.svg'\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <div className={styles.appPreloader}>\r\n      <img src={preloader} alt='preloader' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__i0332\"};","import { usersAPI } from \"../api/usersAPI\"\r\nimport { UserInfoType } from '../types/types'\r\nimport { InferActionsTypes, BaseThunkType } from './store-redux'\r\n\r\nconst FOLLOW_TOGGLE = 'social_network/users/FOLLOW_TOGGLE'\r\nconst SET_USERS = 'social_network/users/SET_USERS'\r\nconst SET_TOTAL_COUNT = 'social_network/users/SET_TOTAL_COUNT'\r\nconst SET_CURRENT_PAGE = 'social_network/users/SET_CURRENT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'social_network/users/TOGGLE_IS_FETCHING'\r\nconst IS_FOLLOWING_IN_PROGRESS_TOGGLE = 'social_network/users/IS_FOLLOWING_IN_PROGRESS_TOGGLE'\r\nconst SET_USERS_FILTER = 'social_network/users/SET_USERS_FILTER'\r\n\r\n// AC - action creator\r\n\r\nexport const actionCreators = {\r\n  setUsersFilterAC: (usersFilter: UsersFilterType = { term: '', friend: null }) => {\r\n    return { type: SET_USERS_FILTER, payload: usersFilter } as const\r\n  },\r\n  followToggleAC: (userId: number | null) => {\r\n    return { type: FOLLOW_TOGGLE, userId } as const\r\n  },\r\n  setUsersAC: (usersList: UsersListType) => {\r\n    return { type: SET_USERS, usersList } as const\r\n  },\r\n  setTotalCountAC: (totalCount: number) => {\r\n    return { type: SET_TOTAL_COUNT, totalCount } as const\r\n  },\r\n  setCurrentPageAC: (currentPage: number) => {\r\n    return { type: SET_CURRENT_PAGE, currentPage } as const\r\n  },\r\n  toggleIsFetchingAC: (isFetching: boolean) => {\r\n    return { type: TOGGLE_IS_FETCHING, isFetching } as const\r\n  },\r\n  isFollowingToggleAC: (followingUserId: number | null) => {\r\n    return { type: IS_FOLLOWING_IN_PROGRESS_TOGGLE, followingUserId } as const\r\n  }\r\n}\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actionCreators>\r\n\r\n// thunk creators\r\n\r\n// type GetStateType = () => AppStateType\r\n// type DispatchType = Dispatch<ActionTypes>\r\n// предыдущие 2 типа описывали типы ф-ций (dispatch, getState), пока не был введен тип для санки ThunkType\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\n\r\nexport const requestUsersThunk = (currentPage: number, usersOnPageCount: number, usersFilter: UsersFilterType): ThunkType => {\r\n  return (dispatch) => {\r\n    dispatch(actionCreators.toggleIsFetchingAC(true))\r\n    usersAPI.getUsers(currentPage, usersOnPageCount, usersFilter).then((data) => {\r\n      dispatch(actionCreators.setUsersAC(data.items))\r\n      dispatch(actionCreators.setTotalCountAC(data.totalCount))\r\n      dispatch(actionCreators.toggleIsFetchingAC(false))\r\n    })\r\n  }\r\n}\r\n\r\ntype UsersListType = Array<UserInfoType>\r\n\r\nexport type UsersFilterType = {\r\n  term: string\r\n  friend: boolean | null\r\n}\r\n\r\ntype StateType = {\r\n  usersList: UsersListType\r\n  totalCount: number\r\n  currentPage: number\r\n  usersOnPageCount: number\r\n  isFetching: boolean\r\n  /* массив из id юзеров, которые отображены на текущей странице и находятся в процессе операции\r\n  follow/unfollow (асинхронного запроса к серверу). Массив позволяет при рендере страницы юзеров\r\n  поюзерно блокировать кнопку дружбы на время разрешения запроса (проблематика - чтобы можно было \r\n  фолловить очередного юзера, пока процесс фоллоу для предыдущего в процессе) */\r\n  isFollowingInProgress: Array<number | null>\r\n  usersFilter: UsersFilterType\r\n}\r\n\r\n// getState().users\r\nconst initialState: StateType = {\r\n  // see usersList format on url='https://social-network.samuraijs.com/api/1.0/users?page=1&count=2'\r\n  usersList: [],\r\n  totalCount: 0,\r\n  currentPage: 1,\r\n  usersOnPageCount: 5,\r\n  isFetching: false,\r\n  //massiv iz id userov kotorie v processe zaprosa na followed - esli id net, to button ne disable\r\n  isFollowingInProgress: [],\r\n  usersFilter: {\r\n    term: '',\r\n    friend: null\r\n  }\r\n\r\n}\r\n\r\nconst usersReduser = (state = initialState, action: ActionTypes): StateType => {\r\n  switch (action.type) {\r\n\r\n    case SET_USERS_FILTER:\r\n      return { ...state, usersFilter: { ...action.payload } }\r\n\r\n    case FOLLOW_TOGGLE:\r\n      return {\r\n        ...state,\r\n        usersList: state.usersList.map((user) => {\r\n          if (user.id === action.userId) {\r\n            return { ...user, followed: (!user.followed) }\r\n          }\r\n          return user\r\n        })\r\n      }\r\n\r\n    case SET_USERS:\r\n      return { ...state, usersList: [...action.usersList] }\r\n\r\n    case SET_TOTAL_COUNT:\r\n      return { ...state, totalCount: action.totalCount }\r\n\r\n    case SET_CURRENT_PAGE:\r\n      return { ...state, currentPage: action.currentPage }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return { ...state, isFetching: action.isFetching }\r\n\r\n    case IS_FOLLOWING_IN_PROGRESS_TOGGLE:\r\n      let tempArr = [...state.isFollowingInProgress]\r\n      if (tempArr.indexOf(action.followingUserId) < 0) {\r\n        tempArr = [...tempArr, action.followingUserId]\r\n      }\r\n      else {\r\n        tempArr = tempArr.filter((item) => item !== action.followingUserId)\r\n      }\r\n      return { ...state, isFollowingInProgress: [...tempArr] }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default usersReduser","export default __webpack_public_path__ + \"static/media/defaultUserImage.565306ac.jpg\";","import { instanceAxios } from './api'\r\nimport { UserInfoType, MainResponseType } from '../types/types'\r\nimport { UsersFilterType } from '../redux/users-reducer'\r\n\r\nexport type GetItemsResponseType<T> = {\r\n  items: Array<T>\r\n  totalCount: number\r\n  error: string | null\r\n}\r\nexport type SetMainResponseType<T> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: []\r\n  data: T\r\n}\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage: number, usersOnPageCount: number, usersFilter: UsersFilterType = { term: '', friend: null }) {\r\n    let queryParameters: string = `users?page=${currentPage}&count=${usersOnPageCount}`\r\n    if (usersFilter.term !== '') {queryParameters = queryParameters + `&term=${usersFilter.term}`}\r\n    if (usersFilter.friend !== null) {queryParameters = queryParameters + `&friend=${usersFilter.friend}`}\r\n    return instanceAxios.get<GetItemsResponseType<UserInfoType>>(queryParameters).then(response => response.data);\r\n  },\r\n  setUserFollow(userId: number | null) {\r\n    return instanceAxios.post<MainResponseType>(`follow/${userId}`).then(response => response.data);\r\n  },\r\n\r\n  setUserUnfollow(userId: number | null) {\r\n    return instanceAxios.delete<MainResponseType>(`follow/${userId}`).then(response => response.data);\r\n  }\r\n}\r\n","/* Реализовывать взаимодействие DAL и BLL (chatAPI и chat-reducer) будем с изпользованием \r\n паттерна publisher-subscriber. При этом реализуем множественную подписку на события 'event':\r\n    'messages-received' - получаемые события по каналу;\r\n    'status-changed' - статус (текущее состояние) WS сщединения.\r\n Подписчик (в нашем случае в chat-reducer) при вызове метода chatAPI.subscribe('event', callback(messages | status)),\r\n будет подписан на событие и оповещен с случае его изменения.*/\r\n\r\n/* Для хранения подписок будем использовать объект с двумя массивами событий */\r\n\r\nlet subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\n// Описание типа для объекта сообщения \r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\n// Инициируем ws канал значением null\r\nlet ws: WebSocket | null = null\r\n\r\n// Опишем обработчики событий ws-канала\r\n\r\n// Ф-ция обработчика события \"close\" канала - каждые 5 сек пытается открыть закрытый канал\r\nconst onCloseHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createWsChannel, 5000)\r\n}\r\n\r\n/* Обработчик события \"message\" канала. Пушит поступившие messages в callback-и каждому подписчику.\r\nПри запуске обработчика (возникновении события на канале) выполнятся все callback-и подписчики.\r\nПростыми словами - передаем messages подписчикам, а они у себя производят необходимые операции (суть callback-а)*/\r\nconst onMessageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\n\r\n// Обработчик события \"open\" канала.\r\nconst onOpenHandler = () => {\r\n    notifySubscribersAboutStatus(\"ready\")\r\n}\r\n\r\n// Обработчик события \"error\" канала.\r\nconst onErrorHandler = (event: Event) => {\r\n    notifySubscribersAboutStatus(\"error\")\r\n}\r\n\r\n/* Вспомогательная ф-ция уведомления подписчиков события 'status-changed'.\r\nПробегаемся по всем callbacks и передаем в них изменившийся статус. */\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\n/* Вспомогательная ф-ция для зачистки созданных EventListeners */\r\nconst cleanUpFunction = () => {\r\n    ws?.removeEventListener('close', onCloseHandler)\r\n    ws?.removeEventListener('message', onMessageHandler)\r\n    ws?.removeEventListener('error', onErrorHandler)\r\n    ws?.removeEventListener('open', onOpenHandler)\r\n}\r\n\r\n// Ф-ция создания и реконнекта wsChannel-а. \r\nconst createWsChannel = () => {\r\n    /*Предварительно если WS соединение было открыто, то зачищаем его - удаляем eventListener-ы и закрываем канал. */\r\n    ws?.close()\r\n    cleanUpFunction()\r\n\r\n    /*Создаем новое WS-соединение, оповещаем подписчиков о статусе канала 'pending'. \r\n    Добавляем eventListener-ы на события канала. */\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus(\"pending\")\r\n    ws.addEventListener('close', onCloseHandler)\r\n    ws.addEventListener('message', onMessageHandler)\r\n    ws.addEventListener('error', onErrorHandler)\r\n    ws.addEventListener('open', onOpenHandler)\r\n    // Запустим ф-цию проверки статуса канала с интервалом 1 с\r\n    // setInterval(() => {\r\n    //  }, 1000)\r\n}\r\n\r\n// Oбъект chatAPI, за медоды которого будем дергать его из других слоев, в частности из бизнес-слоя BLL (chat-reducer)\r\nexport const chatAPI = {\r\n    // Метод создания ws-канала\r\n    start() {\r\n        createWsChannel()\r\n    },\r\n    /* Метод остановки канала.\r\n    Обнуляем массивы в объекте подписчиков, убираем все eventListeners, закрываем соединение. */\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        ws?.close()\r\n        cleanUpFunction()\r\n    },\r\n    // Метод подписки - просто пушим callback подписчик в массив подписчиков\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        // Отписка сделана как в Redux через возврат ф-ции.\r\n        // Также отписка сделана отдельным методом ниже. Как будем отписываться - решим дальше. \r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n\r\n    // Метод отписки. Убираем callback-подписчик из массива подписчиков.\r\n\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n\r\n    // Метод отправки сообщений\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\n/* \r\nИнфа по статусу готовности WS канала\r\nЭти константы используются атрибутом readyState для описания состояния WebSocket-подключения:\r\nCONNECTING\t0\tСоединение ещё не открыто.\r\nOPEN\t    1\tСоединение открыто и готово к обмену данными.\r\nCLOSING\t    2\tСоединение в процессе закрытия.\r\nCLOSED\t    3\tСоединение закрыто или не может открыться.\r\n\r\nonclose\t    EventListener\tОбработчик событий, вызываемый, когда readyState WebSocket соединения изменяется на CLOSED.\r\n            Наблюдатель получает CloseEvent с именем \"close\".\r\nonerror\t    EventListener\tОбработчик событий, вызываемый, когда происходит ошибка. Это простое событие,\r\n            называемое \"error\".\r\nonmessage\tEventListener\tОбработчик событий , вызываемый, когда получается сообщение с сервера.\r\n            Наблюдатель получает MessageEvent, называемое \"message\".\r\nonopen\t    EventListener\tНаблюдатель событий, вызываемый, когда readyState WebSocket - соединения изменяется \r\n            на OPEN; это показывает, что соединение готово отсылать и принимать данные.\r\n            Это простое событие, называемое \"open\".\r\n*/\r\n","import { Dispatch } from \"redux\"\r\nimport { v1 } from 'uuid'\r\n\r\nimport { chatAPI, StatusType, ChatMessageAPIType } from \"../api/chatAPI\"\r\nimport { InferActionsTypes, BaseThunkType } from './store-redux'\r\n\r\nconst MESSAGES_RECEIVED = 'SN/chat/MESSAGES_RECEIVED'\r\nconst MESSAGES_CLEARED = 'SN/chat/MESSAGES_CLEARED'\r\nconst STATUS_CHANGED = 'SN/chat/STATUS_CHANGED'\r\n\r\n// Т.к. с сервера получаем объект сообщения без поля id, а идеальный id нужен для рендера сообщений,\r\n// то на уровне store вводим свой объект сообщения, дополняемый полем id\r\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\r\ntype ActionTypes = InferActionsTypes<typeof actionCreators>\r\n\r\nconst actionCreators = {\r\n  //Обновляем массив сообщений в стейте поступившими messages \r\n  messagesReceived: (apiMessages: ChatMessageAPIType[]) => {\r\n    // Преобразуем тип получаемых из WS-канала сообщений в тип для store - добавляем уникальный id\r\n    // Оставляем в массиве сообщений 100 последних сообщений - или все сообщения, если их меньше 100\r\n    const messages: ChatMessageType[] = apiMessages\r\n      .map(m => ({ ...m, id: v1() }))\r\n      .filter((m, index, array) => index >= array.length - 100)\r\n    return { type: MESSAGES_RECEIVED, messages } as const\r\n  },\r\n  messagesCleared: () => {\r\n    // Очищаем массив сообщений. Используется при unmounte компоненты ChatPage.\r\n    // При открытии нового WS-соединения будет получен новый массив messages - поэтому дабы избежать дублирования\r\n    // необходимо сбросить предыдущий массив.\r\n    return { type: MESSAGES_CLEARED } as const\r\n  },\r\n  statusChanged: (status: StatusType) => {\r\n    return { type: STATUS_CHANGED, status } as const\r\n  }\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\n\r\n/* Здесь делаем для подписки-отписки НЕ просто ф-цию типа (messages) => void,  а создаем ф-цию высшего порядка,\r\nчтобы внутрь передать ф-цию dispatch, т.к. при выносе этой ф-ции за пределы Санки замыкание на dispatch пропадает\r\n(dispatch является частью callback-а, которым мы подписываемся).\r\nЭтой конструкцией производим мемоизацию ф-ций обработки.\r\nТеперь при вызове newMessagesHandlerCreator | statusChangedHandlerCreator внутри Санки dispatch будет взят\r\nиз замыкания внутри Санки.\r\n*/\r\nlet _newMessagesHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessagesHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_newMessagesHandler === null) {\r\n    _newMessagesHandler = (messages) => {\r\n      dispatch(actionCreators.messagesReceived(messages))\r\n    }\r\n  }\r\n  return _newMessagesHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(actionCreators.statusChanged(status))\r\n    }\r\n  }\r\n  return _statusChangedHandler\r\n}\r\n\r\n/* Санка прослушивания ws-канала.\r\nПри ее диспатче происходит инициализация ws-канала (запуск канала, если его нет).\r\nИ производится подписка на канал - передается через метод chatAPI.subscribe callback в DAL уровень.\r\nПри поступлении сообщений messages в DAL вызовется этот callback и через action обновит state.chat.messages\r\nЗачем выше создана ф-ция newMessagesHandlerCreator - для метода .unsubscribe нужна та же самая ф-ция, что и для .subscribe\r\n(происходит отписка под капотом через removeEventListener - для нее нужна та же ф-ция, а ф-ция - это объект, ссылочный тип - \r\nт.е. ссылка должна быть на одну и ту же ячейку памяти)\r\n*/\r\nexport const startMessagesListeningThunk = (): ThunkType => {\r\n  return (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessagesHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n  }\r\n}\r\n\r\n// Санка отписывания от ws канала с остановкой работы последнего (ws.close()) через методы chatAPI\r\nexport const stopMessagesListeningThunk = (): ThunkType => {\r\n  return (dispatch) => {\r\n    chatAPI.stop()\r\n    chatAPI.unsubscribe('messages-received', newMessagesHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    dispatch(actionCreators.messagesCleared())\r\n  }\r\n}\r\n\r\n// Санка отправки сообщения\r\nexport const sendMessageThunk = (message: string): ThunkType => {\r\n  return (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n  }\r\n}\r\n\r\n// getState().chat\r\n// Храним массив сообщений чата (max 100 последних сообщений)\r\n\r\nconst initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: 'pending' as StatusType\r\n}\r\n\r\nexport type StateType = typeof initialState\r\n\r\nconst chatReducer = (state = initialState, action: ActionTypes): StateType => {\r\n  switch (action.type) {\r\n\r\n    case MESSAGES_RECEIVED:\r\n      return {\r\n        ...state, messages: [...state.messages, ...action.messages]\r\n      }\r\n\r\n    case MESSAGES_CLEARED:\r\n      return {\r\n        ...state, messages: [...[]]\r\n      }\r\n\r\n    case STATUS_CHANGED:\r\n      return {\r\n        ...state, status: action.status\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default chatReducer","import {AppStateType} from './store-redux'\r\n\r\nexport const getUserProfileInfo = (state: AppStateType) => state.profile.userProfile\r\nexport const getMyProfileInfo = (state: AppStateType) => state.profile.myProfile\r\nexport const getUserStatus = (state: AppStateType) => state.profile.userStatus\r\nexport const getMyStatus = (state: AppStateType) => state.profile.myStatus\r\nexport const getProfilePosts = (state: AppStateType) => state.profile.profilePosts\r\nexport const getIsFetching = (state: AppStateType) => state.profile.isFetching","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Aside_aside__3ZQ4l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appPreloader\":\"Preloader_appPreloader__2d9ar\"};"],"sourceRoot":""}